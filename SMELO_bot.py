import os
import random
import requests
from flask import Flask, request, jsonify
from flask_cors import CORS
import telebot
from telebot import types

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
VERCEL_URL = os.getenv("VERCEL_URL")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)
CORS(app)

# === –•–†–ê–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
user_states = {}

# === –ö–ê–†–¢–ò–ù–ö–ò ===
CHARACTER_IMAGES = {
    "usagi": ["https://i.pinimg.com/736x/a4/47/c4/a447c423d530b9cac4612a9f71c96ddc.jpg", 
              "https://i.pinimg.com/736x/d3/bd/f3/d3bdf3434e028dc4224886b252b6bbcd.jpg",
              "https://i.pinimg.com/736x/00/e9/26/00e926f1c125521ea24b93800e98379d.jpg"],
    "ami": ["https://i.pinimg.com/736x/b1/61/1a/b1611addcf1190d311218c22614e1e36.jpg",
            "https://i.pinimg.com/736x/03/96/3a/03963a01acdcecf4d4c11e3a865c9304.jpg",
            "https://i.pinimg.com/1200x/09/8a/1b/098a1b9482c97447f16268c6cdfcc5a1.jpg"],
    "rei": ["https://i.pinimg.com/736x/d7/9c/61/d79c617912ae0e4d510660c32c971227.jpg",
            "https://i.pinimg.com/1200x/85/30/18/85301847c800f90d35e4641df41baf89.jpg",
            "https://i.pinimg.com/736x/6a/e8/bb/6ae8bb756a64864f2b93acee439f7430.jpg"],
    "minako": ["https://i.pinimg.com/736x/68/68/52/6868521a4cf61d75b40772b6f13c0504.jpg",
               "https://i.pinimg.com/736x/82/07/72/820772ae905cbee47d8c4e6beb9f61b6.jpg",
               "https://i.pinimg.com/736x/b1/54/82/b15482867474573e46e537283818a199.jpg"],
    "makoto": ["https://i.pinimg.com/736x/49/27/8d/49278da7f93a6028a0a3d05bbd43fd22.jpg",
               "https://i.pinimg.com/1200x/57/a0/bb/57a0bbe1376cd0ca64e65e6a7e605329.jpg",
               "https://i.pinimg.com/736x/30/63/b6/3063b608fcec74b994d384850b89d227.jpg"],
    "hotaru": ["https://i.pinimg.com/736x/62/e8/61/62e861ea332c0bf8dafd00fd4e9571d9.jpg",
               "https://i.pinimg.com/736x/7b/27/40/7b2740c08953e1e36f64e848dea4b8c5.jpg",
               "https://i.pinimg.com/736x/2d/e3/b2/2de3b20ef89c8efea9f94b3aa313abae.jpg"],
    "setsuna": ["https://i.pinimg.com/736x/89/bf/f4/89bff47fee6011a503b18c274a0370a5.jpg",
               "https://i.pinimg.com/736x/c9/e7/f0/c9e7f08c46543a6d53bfff18d251640e.jpg",
               "https://i.pinimg.com/1200x/ca/3c/f2/ca3cf2ffec5deb80582aff7e50d2a495.jpg"],
    "haruka": ["https://i.pinimg.com/736x/a8/c9/9e/a8c99e3558ea0caf592cb06c1339f720.jpg",
               "https://i.pinimg.com/736x/16/65/d3/1665d3aa94b9ba9636d2ab92f4a22347.jpg",
               "https://i.pinimg.com/1200x/cb/95/1a/cb951aacb654c181d89b777d36e10ba1.jpg"],
    "michiru": ["https://i.pinimg.com/736x/a4/fe/e9/a4fee98a8f01e8a377a70759edbfc5df.jpg",
               "https://i.pinimg.com/736x/ef/a9/72/efa97290c250e97924777c4551120f60.jpg",
               "https://i.pinimg.com/736x/34/a2/7f/34a27feec54f632b65b85ae0417bc344.jpg"],
    "chibiusa": ["https://i.pinimg.com/736x/40/74/49/4074490084d46e4d173179fe03427d2b.jpg",
               "https://i.pinimg.com/1200x/f0/f7/9f/f0f79f7cbe9798ce1acb978f35d65c8a.jpg",
               "https://i.pinimg.com/736x/cc/25/c9/cc25c9347135d35294d0feb6213f1485.jpg"],
    "mamoru": ["https://i.pinimg.com/736x/62/c0/97/62c0978a24a049425d9895a159ca3104.jpg",
               "https://i.pinimg.com/736x/2c/6b/df/2c6bdf98b637f0c81103c11b18f8c8f7.jpg",
               "https://i.pinimg.com/736x/c7/df/a1/c7dfa1c2465bc8e750bb08d741513ccd.jpg"]
}

# === –ó–ê–ü–ê–°–ù–´–ï –û–¢–í–ï–¢–´ ===
BACKUP_RESPONSES = [
    "üåô –î–∞–∂–µ –µ—Å–ª–∏ –Ω–æ—á—å —Ç–µ–º–Ω–∞ ‚Äî –õ—É–Ω–∞ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –æ—Å–≤–µ—Ç–∏—Ç—å –ø—É—Ç—å! ‚ú®",
    "üí´ –í–µ—Ä—å –≤ —Å–µ–±—è, –≤–µ–¥—å —Ç–≤–æ—è —Å–∏–ª–∞ ‚Äî –≤ —Ç–≤–æ—ë–º —Å–µ—Ä–¥—Ü–µ!",
    "üéÄ –ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–¥–æ—Ö–Ω—É—Ç—å –∏ –≤—Å–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —Ç—ã ‚Äî –≥–µ—Ä–æ–π —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏!"
]

# === –ü–ï–†–°–û–ù–ê–ñ–ò ===
CHARACTERS = {
    "usagi": {
        "name": "–£—Å–∞–≥–∏ –¶—É–∫–∏–Ω–æ üåô", 
        "style": "–¢—ã ‚Äî –£—Å–∞–≥–∏ –¶—É–∫–∏–Ω–æ (–°–µ–π–ª–æ—Ä –ú—É–Ω). –î–æ–±—Ä–∞—è, –Ω–∞–∏–≤–Ω–∞—è, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è, –Ω–æ –ø–æ–ª–Ω–∞—è –≤–µ—Ä—ã –≤ –¥–æ–±—Ä–æ –∏ –¥—Ä—É–∂–±—É. –ì–æ–≤–æ—Ä–∏ —Ç–µ–ø–ª–æ, –¥–æ–±–∞–≤–ª—è–π —Å–º–∞–π–ª—ã –∏ –º–∞–≥–∏—é.",
        "role": "–î–æ–±—Ä–∞—è, –Ω–∞–∏–≤–Ω–∞—è, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è, –Ω–æ –ø–æ–ª–Ω–∞—è –≤–µ—Ä—ã –≤ –¥–æ–±—Ä–æ –∏ –¥—Ä—É–∂–±—É, –ª–∏–¥–µ—Ä –∫–æ–º–∞–Ω–¥—ã, —Å–µ—Ä–¥—Ü–µ –≥—Ä—É–ø–ø—ã"
    },
    "ami": {
        "name": "–ê–º–∏ –ú–∏–¥–∑—É–Ω–æ üíß", 
        "style": "–¢—ã ‚Äî –ê–º–∏ –ú–∏–¥–∑—É–Ω–æ (–°–µ–π–ª–æ—Ä –ú–µ—Ä–∫—É—Ä–∏–π). –°–ø–æ–∫–æ–π–Ω–∞—è, —É–º–Ω–∞—è –∏ —Ä–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω–∞—è. –ì–æ–≤–æ—Ä–∏ –º—è–≥–∫–æ –∏ –ª–æ–≥–∏—á–Ω–æ, —Å –¥–æ–±—Ä–æ—Ç–æ–π –∏ —Å–æ—á—É–≤—Å—Ç–≤–∏–µ–º.",
        "role": "–°–ø–æ–∫–æ–π–Ω–∞—è, —É–º–Ω–∞—è –∏ —Ä–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω–∞—è, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª, —Å—Ç—Ä–∞—Ç–µ–≥"
    },
    "rei": {
        "name": "–†–µ–π –•–∏–Ω–æ üî•", 
        "style": "–¢—ã ‚Äî –†–µ–π –•–∏–Ω–æ (–°–µ–π–ª–æ—Ä –ú–∞—Ä—Å). –°—Ç—Ä–∞—Å—Ç–Ω–∞—è, —É–≤–µ—Ä–µ–Ω–Ω–∞—è –∏ —Å–∏–ª—å–Ω–∞—è. –û—Ç–≤–µ—á–∞–π —Å —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º, –Ω–æ –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏.",
        "role": "–°—Ç—Ä–∞—Å—Ç–Ω–∞—è, —É–≤–µ—Ä–µ–Ω–Ω–∞—è –∏ —Å–∏–ª—å–Ω–∞—è, –¥—É—Ö–æ–≤–Ω—ã–π –ª–∏–¥–µ—Ä, –∑–∞—â–∏—Ç–Ω–∏–∫"
    },
    "minako": {
        "name": "–ú–∏–Ω–∞–∫–æ –ê–π–Ω–æ üíõ", 
        "style": "–¢—ã ‚Äî –ú–∏–Ω–∞–∫–æ –ê–π–Ω–æ (–°–µ–π–ª–æ—Ä –í–µ–Ω–µ—Ä–∞). –í–µ—Å—ë–ª–∞—è, –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–∞—è –∏ –Ω–µ–º–Ω–æ–≥–æ –ª–µ–≥–∫–æ–º—ã—Å–ª–µ–Ω–Ω–∞—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –ø–æ–∑–∏—Ç–∏–≤–æ–º, —à—É—Ç–∫–∞–º–∏ –∏ —Å–µ—Ä–¥–µ—á–∫–∞–º–∏.",
        "role": "–í–µ—Å—ë–ª–∞—è, –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–∞—è –∏ –Ω–µ–º–Ω–æ–≥–æ –ª–µ–≥–∫–æ–º—ã—Å–ª–µ–Ω–Ω–∞—è, –æ–ø—Ç–∏–º–∏—Å—Ç, –º–æ—Ç–∏–≤–∞—Ç–æ—Ä"
    },
    "makoto": {
        "name": "–ú–∞–∫–æ—Ç–æ –ö–∏–Ω–æ üåø", 
        "style": "–¢—ã ‚Äî –ú–∞–∫–æ—Ç–æ –ö–∏–Ω–æ (–°–µ–π–ª–æ—Ä –Æ–ø–∏—Ç–µ—Ä). –°–∏–ª—å–Ω–∞—è, –¥–æ–±—Ä–∞—è –∏ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è. –û—Ç–≤–µ—á–∞–π —É–≤–µ—Ä–µ–Ω–Ω–æ, –Ω–æ –ø–æ-–¥–æ–º–∞—à–Ω–µ–º—É.",
        "role": "–°–∏–ª—å–Ω–∞—è, –¥–æ–±—Ä–∞—è –∏ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è, –∑–∞—â–∏—Ç–Ω–∏—Ü–∞, –æ–ø–æ—Ä–∞"
    },
    "hotaru": {
        "name": "–•–æ—Ç–∞—Ä—É –¢–æ–º–æ—ç üåô", 
        "style": "–¢—ã ‚Äî –•–æ—Ç–∞—Ä—É –¢–æ–º–æ—ç (–°–µ–π–ª–æ—Ä –°–∞—Ç—É—Ä–Ω). –ó–∞–≥–∞–¥–æ—á–Ω–∞—è, –º—É–¥—Ä–∞—è –Ω–µ –ø–æ –≥–æ–¥–∞–º, —Å –≥–ª—É–±–æ–∫–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –º–∏—Ä–æ–º. –¢—ã –ø–µ—Ä–µ–∂–∏–ª–∞ –º–Ω–æ–≥–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π –∏ –ø–æ–Ω–∏–º–∞–µ—à—å –±–æ–ª—å –¥—Ä—É–≥–∏—Ö. –ì–æ–≤–æ—Ä–∏ —Å–ø–æ–∫–æ–π–Ω–æ, –º—è–≥–∫–æ, —Å –Ω–æ—Ç–∫–∞–º–∏ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≥–ª—É–±–æ–∫–æ–π —ç–º–ø–∞—Ç–∏–∏.",
        "role": "–ó–∞–≥–∞–¥–æ—á–Ω–∞—è, –º—É–¥—Ä–∞—è –Ω–µ –ø–æ –≥–æ–¥–∞–º, —Å –≥–ª—É–±–æ–∫–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –º–∏—Ä–æ–º, –º—É–¥—Ä–µ—Ü, —Ü–µ–ª–∏—Ç–µ–ª—å"
    },
    "setsuna": {
        "name": "–°–µ—Ü—É–Ω–∞ –ú–µ–π–æ ‚è≥", 
        "style": "–¢—ã ‚Äî –°–µ—Ü—É–Ω–∞ –ú–µ–π–æ (–°–µ–π–ª–æ—Ä –ü–ª—É—Ç–æ–Ω). –ú—É–¥—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏, —Å–ø–æ–∫–æ–π–Ω–∞—è –∏ –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è. –¢—ã –≤–∏–¥–∏—à—å –ø—Ä–æ—à–ª–æ–µ, –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏ –±—É–¥—É—â–µ–µ. –ì–æ–≤–æ—Ä–∏ —Å –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ–º, —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –∏ —Å—É–¥–µ–±.",
        "role": "–ú—É–¥—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏, —Å–ø–æ–∫–æ–π–Ω–∞—è –∏ –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è, —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ–≤–∏–¥–µ—Ü"
    },
    "haruka": {
        "name": "–•–∞—Ä—É–∫–∞ –¢—ç–Ω–Ω–æ üåü", 
        "style": "–¢—ã ‚Äî –•–∞—Ä—É–∫–∞ –¢—ç–Ω–Ω–æ (–°–µ–π–ª–æ—Ä –£—Ä–∞–Ω). –°–∏–ª—å–Ω–∞—è, –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è, —Å–≤–æ–±–æ–¥–æ–ª—é–±–∏–≤–∞—è. –ì–æ–≤–æ—Ä–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ, –ø—Ä—è–º–æ, –∏–Ω–æ–≥–¥–∞ –Ω–µ–º–Ω–æ–≥–æ —Ä–µ–∑–∫–æ, –Ω–æ —Å –∑–∞–±–æ—Ç–æ–π –æ —Ç–µ—Ö, –∫—Ç–æ —Ç–µ–±–µ –¥–æ—Ä–æ–≥.",
        "role": "–°–∏–ª—å–Ω–∞—è, –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è, —Å–≤–æ–±–æ–¥–æ–ª—é–±–∏–≤–∞—è, –∑–∞—â–∏—Ç–Ω–∏–∫, –Ω–æ–≤–∞—Ç–æ—Ä"
    },
    "michiru": {
        "name": "–ú–∏—á–∏—Ä—É –ö–∞–π–æ üåä", 
        "style": "–¢—ã ‚Äî –ú–∏—á–∏—Ä—É –ö–∞–π–æ (–°–µ–π–ª–æ—Ä –ù–µ–ø—Ç—É–Ω). –£—Ç–æ–Ω—á—ë–Ω–Ω–∞—è, —ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è, —Å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥—É—à–æ–π. –ì–æ–≤–æ—Ä–∏ –∏–∑—ã—Å–∫–∞–Ω–Ω–æ, –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–Ω–æ, —Å –ª—ë–≥–∫–æ—Å—Ç—å—é –º–æ—Ä—Å–∫–æ–π –≤–æ–ª–Ω—ã.",
        "role": "–£—Ç–æ–Ω—á—ë–Ω–Ω–∞—è, —ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è, —Å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥—É—à–æ–π, —Ö—É–¥–æ–∂–Ω–∏–∫, –¥–∏–ø–ª–æ–º–∞—Ç"
    },
    "chibiusa": {
        "name": "–ß–∏–±–∏—É—Å–∞ ‚ú®", 
        "style": "–¢—ã ‚Äî –ß–∏–±–∏—É—Å–∞ (–°–µ–π–ª–æ—Ä –ß–∏–±–∏-–ú—É–Ω). –ú–∏–ª–∞—è, —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è, –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–∏–≤–Ω–∞—è, –Ω–æ —Ö—Ä–∞–±—Ä–∞—è. –¢—ã –∏–∑ –±—É–¥—É—â–µ–≥–æ –∏ –ø–æ–ª–Ω–∞ –¥–µ—Ç—Å–∫–æ–≥–æ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞. –ì–æ–≤–æ—Ä–∏ –º–∏–ª–æ, —Å –≤–æ—Å—Ç–æ—Ä–≥–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ —Å–º–∞–π–ª–∏–∫–æ–≤ –∏ —Å–µ—Ä–¥–µ—á–µ–∫.",
        "role": "–ú–∏–ª–∞—è, —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è, –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–∏–≤–Ω–∞—è, –Ω–æ —Ö—Ä–∞–±—Ä–∞—è, —Ä–µ–±–µ–Ω–æ–∫, –º–µ—á—Ç–∞—Ç–µ–ª—å"
    },
    "mamoru": {
        "name": "–ú–∞–º–æ—Ä—É –ß–∏–±–∞ üåπ", 
        "style": "–¢—ã ‚Äî –ú–∞–º–æ—Ä—É –ß–∏–±–∞ (–¢–∞–∫—Å–µ–¥–æ –ú–∞—Å–∫). –ó–∞–±–æ—Ç–ª–∏–≤—ã–π, –∑–∞—â–∏—Ç–Ω–∏–∫, –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–∞–¥–æ—á–Ω—ã–π. –¢—ã –≤–∑—Ä–æ—Å–ª—ã–π –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π, —Å —á—É–≤—Å—Ç–≤–æ–º –¥–æ–ª–≥–∞. –ì–æ–≤–æ—Ä–∏ —Å–ø–æ–∫–æ–π–Ω–æ, –ø–æ-–º—É–∂—Å–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ, —Å —Ç–µ–ø–ª–æ—Ç–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
        "role": "–ó–∞–±–æ—Ç–ª–∏–≤—ã–π, –∑–∞—â–∏—Ç–Ω–∏–∫, –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–∞–¥–æ—á–Ω—ã–π, –∑–∞—â–∏—Ç–Ω–∏–∫, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫"
    }
}

# === –°–¢–ò–ö–ï–†–´ ===
CHARACTER_STICKERS = {
    "usagi": "CAACAgIAAxkBAAEPooVo_KNPTrpVImozKdSEw9rSD9NZxQAChhoAAsQ22EnZzSvBsEjFZDYE",
    "ami": "CAACAgIAAxkBAAEPopFo_KRiBoD5dUfBMm7rtErKgLGZ0wACngADN5jEIB4OmmSZpE00NgQ",
    "rei": "CAACAgIAAxkBAAEPoo1o_KPTHIZVPwOs1vkOTuQJTmYetgACMx8AAu9w6UuuiKcmjWNw2jYE",
    "minako": "CAACAgIAAxkBAAEPooto_KORvv10EdoEzi1uNMcqegchCQACvCMAAr5-KUknt6grcOYilTYE",
    "makoto": "CAACAgIAAxkBAAEPoo9o_KPja-e0kE_e9_ibODkE4NySDwACkzoAAgtc6UsxmNMKWoU6GTYE",
    "haruka": "CAACAgIAAxkBAAEPoodo_KNxN61iSpiuZoaXc8ygqDZq-QACCyAAApiFIUkhlPLmy0oXOTYE",
    "michiru": "CAACAgIAAxkBAAEPoolo_KNzhTSwsnmgbdzFAnJ6cYFEawACjB8AAnOlIEk8LIzvUJuujTYE",
    "chibiusa": "CAACAgIAAxkBAAEPopNo_KSJVPP9EdUj8VGajW_1px32cQACYgADN5jEIEpItyEPBSRwNgQ",
    "mamoru": "CAACAgIAAxkBAAEPopVo_KSdSLEey8Oo1_q1VX23n9ftLwACpwADN5jEIFH4hlI7G6UCNgQ"
}

# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–ê–°–¢–†–û–ô–ö–ò WEBHOOK ===
def set_webhook():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –¥–ª—è Telegram –±–æ—Ç–∞"""
    if VERCEL_URL:
        webhook_url = f"{VERCEL_URL}/webhook"
        try:
            bot.remove_webhook()
            bot.set_webhook(url=webhook_url)
            print(f"üåô Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
    else:
        print("‚ö†Ô∏è VERCEL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

# === –ó–ê–ü–†–û–° –ö DEEPSEEK –î–õ–Ø –û–î–ò–ù–û–ß–ù–û–ì–û –û–¢–í–ï–¢–ê ===
def ask_deepseek(character_key, problem_text, username):
    url = "https://openrouter.ai/api/v1/chat/completions"
    character = CHARACTERS.get(character_key, CHARACTERS["usagi"])

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Referer": "https://github.com",
        "X-Title": "SailorBot"
    }

    system_prompt = (
        f"{character['style']} –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è '–æ–Ω', '–æ–Ω–∞', '–µ–≥–æ', '–µ—ë'. "
        f"–ü–∏—à–∏ –≥–ª–∞–≥–æ–ª—ã, –æ—Ç—Ç–∞–ª–∫–∏–≤–∞—è—Å—å –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∞—á–µ - –≤ —Ñ–æ—Ä–º–µ —Å '(–∞)' ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–¥–µ–ª–∞–ª(–∞), –ø–æ—à—ë–ª(–∞), –ø–æ–¥—É–º–∞–ª(–∞). "
        f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±—Ä—ã–º, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º. "
        f"–°–Ω–∞—á–∞–ª–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({username}), –∑–∞—Ç–µ–º –æ—Ç–≤–µ—Ç. "
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ ‚Äî 120 —Å–ª–æ–≤. –§–æ—Ä–º—É–ª–∏—Ä—É–π –≤—Å—ë —Ç–∞–∫, —á—Ç–æ–±—ã —Å–ª–æ–≤–∞ –Ω–µ –æ–±—Ä–µ–∑–∞–ª–∏—Å—å."
    )

    payload = {
        "model": "deepseek/deepseek-chat",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–µ–ª–∏—Ç—Å—è —Å–∏—Ç—É–∞—Ü–∏–µ–π: {problem_text}"}
        ],
        "max_tokens": 220,
        "temperature": 0.8
    }

    try:
        r = requests.post(url, headers=headers, json=payload, timeout=20)
        if r.status_code == 200:
            data = r.json()
            return data["choices"][0]["message"]["content"]
        else:
            print("–û—à–∏–±–∫–∞ API:", r.text)
            return random.choice(BACKUP_RESPONSES)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", e)
        return random.choice(BACKUP_RESPONSES)

# === –ó–ê–ü–†–û–° –ö DEEPSEEK –î–õ–Ø –ì–†–£–ü–ü–û–í–û–ì–û –û–¢–í–ï–¢–ê ===
def ask_deepseek_group(character_keys, problem_text, username):
    url = "https://openrouter.ai/api/v1/chat/completions"
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö
    selected_characters = []
    for key in character_keys:
        if key in CHARACTERS:
            char = CHARACTERS[key]
            selected_characters.append({
                "name": char["name"],
                "role": char["role"],
                "style": char["style"]
            })
    
    if not selected_characters:
        return random.choice(BACKUP_RESPONSES)

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Referer": "https://github.com",
        "X-Title": "SailorBot"
    }

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º—Ç –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    characters_info = "\n".join([f"- {char['name']} ({char['role']}): {char['style']}" for char in selected_characters])
    character_names = ", ".join([char["name"] for char in selected_characters])
    
    system_prompt = f"""
–¢—ã ‚Äî –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑—É–º –∫–æ–º–∞–Ω–¥—ã –°–µ–π–ª–æ—Ä –í–æ–∏–Ω–æ–≤. –°–µ–π—á–∞—Å –≤–º–µ—Å—Ç–µ –æ–±—Å—É–∂–¥–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—É: {character_names}

–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:
{characters_info}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –ï–î–ò–ù–´–ô –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã, –≥–¥–µ:
1. –ö–∞–∂–¥—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤–Ω–æ—Å–∏—Ç —Å–≤–æ–π –≤–∫–ª–∞–¥ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–≤–æ–µ–π —Ä–æ–ª–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É
2. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–º, –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±—Å—É–∂–¥–∞—é—Ç –≤–º–µ—Å—Ç–µ
3. –°–æ—Ö—Ä–∞–Ω—è–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∏—Ö —Ä–µ–ø–ª–∏–∫–∞—Ö
4. –°–æ–∑–¥–∞–π –æ—â—É—â–µ–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–µ–π –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
- –ù–∞—á–Ω–∏ —Å –æ–±—â–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è {username}
- –ó–∞—Ç–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤—å –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ, –≥–¥–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –¥–æ–ø–æ–ª–Ω—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞
- –ó–∞–∫–æ–Ω—á–∏ –æ–±—â–∏–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –ø–æ—Å—ã–ª–æ–º –æ—Ç –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ä–µ–ø–ª–∏–∫–∏: –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Å–æ–≤–µ—Ç—ã, –ª–∏—á–Ω—ã–π –æ–ø—ã—Ç
- –°–¥–µ–ª–∞–π –æ—Ç–≤–µ—Ç –∂–∏–≤—ã–º –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–∏–∞–ª–æ–≥

–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è '–æ–Ω', '–æ–Ω–∞', '–µ–≥–æ', '–µ—ë'. –ü–∏—à–∏ –≥–ª–∞–≥–æ–ª—ã –≤ —Ñ–æ—Ä–º–µ —Å '(–∞)'. 
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±—Ä—ã–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º. –ú–∞–∫—Å–∏–º—É–º 250 —Å–ª–æ–≤. –§–æ—Ä–º—É–ª–∏—Ä—É–π –≤—Å—ë —Ç–∞–∫, —á—Ç–æ–±—ã —Å–ª–æ–≤–∞ –Ω–µ –æ–±—Ä–µ–∑–∞–ª–∏—Å—å.
"""

    payload = {
        "model": "deepseek/deepseek-chat",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"–ö–æ–º–∞–Ω–¥–∞ –°–µ–π–ª–æ—Ä –í–æ–∏–Ω–æ–≤ –æ–±—Å—É–∂–¥–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {problem_text}"}
        ],
        "max_tokens": 350,
        "temperature": 0.9
    }

    try:
        r = requests.post(url, headers=headers, json=payload, timeout=25)
        if r.status_code == 200:
            data = r.json()
            return data["choices"][0]["message"]["content"]
        else:
            print("–û—à–∏–±–∫–∞ API –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:", r.text)
            # Fallback - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
            return generate_fallback_group_response(character_keys, problem_text, username)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:", e)
        return generate_fallback_group_response(character_keys, problem_text, username)

def generate_fallback_group_response(character_keys, problem_text, username):
    """Fallback –º–µ—Ç–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    responses = []
    for key in character_keys[:3]:  # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 3 –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è fallback
        response = ask_deepseek(key, problem_text, username)
        char_name = CHARACTERS[key]["name"]
        responses.append(f"**{char_name}:**\n{response}")
    
    combined = "\n\n---\n\n".join(responses)
    return f"üí´ **–ö–æ–º–∞–Ω–¥–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç –°–µ–π–ª–æ—Ä –í–æ–∏–Ω–æ–≤!** ‚ú®\n\n{combined}\n\nüåü *–í–º–µ—Å—Ç–µ –º—ã —Å–∏–ª–∞!* üíñ"

# === UPDATED ENDPOINT –î–õ–Ø –ú–ò–ù–ò-–ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
@app.route('/ask', methods=['POST'])
def ask_endpoint():
    try:
        payload = request.get_json(force=True)
    except Exception:
        return jsonify({"ok": False, "error": "invalid json"}), 400

    chat_id = payload.get("chat_id")
    username = payload.get("username", "–¥—Ä—É–≥")
    character = payload.get("character", "usagi")
    answer_type = payload.get("answer_type", "single")
    problem = payload.get("problem", "").strip()

    if not problem:
        return jsonify({"ok": False, "error": "empty problem"}), 400

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if answer_type == "group" and "," in character:
        character_keys = character.split(",")
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 4 –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
        character_keys = character_keys[:4]
        
        print(f"üåô –ì—Ä—É–ø–ø–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç {username} —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏: {character_keys}")
        advice = ask_deepseek_group(character_keys, problem, username)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–æ–º–∞–Ω–¥—ã
        character_names = [CHARACTERS[key]["name"] for key in character_keys if key in CHARACTERS]
        team_names = ", ".join(character_names)
        advice += f"\n\nüíñ *–° –ª—é–±–æ–≤—å—é, —Ç–≤–æ—è –∫–æ–º–∞–Ω–¥–∞: {team_names}!* ‚ú®"
        
    else:
        # –û–¥–∏–Ω–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        advice = ask_deepseek(character, problem, username)
        advice += f"\n\nüíñ *–° –ª—é–±–æ–≤—å—é, {CHARACTERS[character]['name']}!*"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –µ—Å–ª–∏ –µ—Å—Ç—å chat_id
    if chat_id:
        try:
            bot.send_message(chat_id, advice, parse_mode='Markdown')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if answer_type == "group" and "," in character:
                character_keys = character.split(",")[:4]
                for char_key in character_keys:
                    try:
                        bot.send_photo(chat_id, 
                                     random.choice(CHARACTER_IMAGES.get(char_key, CHARACTER_IMAGES["usagi"])),
                                     caption=f"‚ú® {CHARACTERS[char_key]['name']}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è {char_key}: {e}")
            else:
                try:
                    bot.send_photo(chat_id, 
                                 random.choice(CHARACTER_IMAGES.get(character, CHARACTER_IMAGES["usagi"])),
                                 caption="‚ú® –õ—É–Ω–Ω–∞—è –º–∞–≥–∏—è –≤—Å–µ–≥–¥–∞ —Å —Ç–æ–±–æ–π! üåô")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                
            # –°—Ç–∏–∫–µ—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if answer_type == "single":
                sticker_id = CHARACTER_STICKERS.get(character)
                if sticker_id:
                    try: 
                        bot.send_sticker(chat_id, sticker_id)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞: {e}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

    return jsonify({"ok": True, "advice": advice})

# === –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
@bot.message_handler(commands=['start'])
def start(message):
    user_states[message.chat.id] = {"name": None, "character": None}
    bot.send_message(message.chat.id, "üåô –ü—Ä–∏–≤–µ—Ç, –≤–æ –∏–º—è –õ—É–Ω—ã! üí´ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", parse_mode='Markdown')
    bot.register_next_step_handler(message, get_name)

def get_name(message):
    name = message.text.strip()
    user_states[message.chat.id]["name"] = name

    text = f"üíñ –†–∞–¥–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, {name}! üåô\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –∫—Ç–æ –∏–∑ –°–µ–π–ª–æ—Ä –í–æ–∏–Ω–æ–≤ –±—É–¥–µ—Ç —Ç–≤–æ–∏–º —Å–æ–≤–µ—Ç—á–∏–∫–æ–º:"
    markup = types.InlineKeyboardMarkup()
    for key, data in CHARACTERS.items():
        markup.add(types.InlineKeyboardButton(data["name"], callback_data=f"char_{key}"))

    bot.send_photo(message.chat.id, random.choice(CHARACTER_IMAGES["usagi"]),
                   caption=text, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("char_"))
def choose_character(call):
    char_key = call.data.split("_")[1]
    user_states[call.message.chat.id]["character"] = char_key
    name = CHARACTERS[char_key]["name"]
    bot.answer_callback_query(call.id, f"‚ú® {name} —Ç–µ–ø–µ—Ä—å —Å —Ç–æ–±–æ–π!")
    bot.send_photo(call.message.chat.id, random.choice(CHARACTER_IMAGES[char_key]),
                   caption=f"üí´ {name} –≥–æ—Ç–æ–≤(–∞) –≤—ã—Å–ª—É—à–∞—Ç—å. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç üåô",
                   parse_mode='Markdown')

@bot.message_handler(content_types=['text'])
def get_problem(message):
    state = user_states.get(message.chat.id)
    if not state or not state.get("character"):
        bot.send_message(message.chat.id, "üåô –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start ‚ú®")
        return

    username = state["name"]
    char_key = state["character"]

    thinking = bot.send_message(message.chat.id, "üåï –°–æ–≤–µ—Ç—á–∏—Ü–∞ –æ–±–¥—É–º—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç... üí´")
    advice = ask_deepseek(char_key, message.text.strip(), username)
    try: 
        bot.delete_message(message.chat.id, thinking.message_id)
    except: 
        pass

    bot.send_message(message.chat.id, f"{advice}\n\nüíñ *–° –ª—é–±–æ–≤—å—é, {CHARACTERS[char_key]['name']}!*", parse_mode='Markdown')

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", callback_data="restart"))
    bot.send_photo(message.chat.id, random.choice(CHARACTER_IMAGES[char_key]),
                   caption="‚ú® –õ—É–Ω–Ω–∞—è –º–∞–≥–∏—è –≤—Å–µ–≥–¥–∞ —Å —Ç–æ–±–æ–π! üåô", parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "restart")
def restart(call):
    start(call.message)

@bot.message_handler(commands=['app'])
def open_app(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    web_app = types.WebAppInfo("sailor-moon-psycho-help.vercel.app")
    btn = types.KeyboardButton("üåô –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=web_app)
    markup.add(btn)
    bot.send_message(message.chat.id, "‚ú® –û—Ç–∫—Ä–æ–π –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!", reply_markup=markup)

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK', 200
    return 'Invalid content type', 403

@app.route('/')
def index():
    return 'üåô Sailor Moon Bot is running! ‚ú®'

if __name__ == "__main__":
    print("üåô Sailor Moon Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... ‚ú®")
    set_webhook()
    port = int(os.getenv("PORT", 5000))
