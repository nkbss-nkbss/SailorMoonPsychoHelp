import os
import random
import requests
from flask import Flask, request, jsonify
from flask_cors import CORS
import telebot
from telebot import types

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
VERCEL_URL = os.getenv("VERCEL_URL")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)
CORS(app)

# === –•–†–ê–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
user_states = {}

# === –ö–ê–†–¢–ò–ù–ö–ò ===
CHARACTER_IMAGES = {
    "usagi": "https://i.pinimg.com/736x/a4/47/c4/a447c423d530b9cac4612a9f71c96ddc.jpg", 
    "ami": "https://i.pinimg.com/736x/b1/61/1a/b1611addcf1190d311218c22614e1e36.jpg",
    "rei": "https://i.pinimg.com/736x/d7/9c/61/d79c617912ae0e4d510660c32c971227.jpg",
    "minako": "https://i.pinimg.com/736x/68/68/52/6868521a4cf61d75b40772b6f13c0504.jpg",
    "makoto": "https://i.pinimg.com/736x/49/27/8d/49278da7f93a6028a0a3d05bbd43fd22.jpg",
    "hotaru": "https://i.pinimg.com/736x/62/e8/61/62e861ea332c0bf8dafd00fd4e9571d9.jpg",
    "setsuna": "https://i.pinimg.com/736x/89/bf/f4/89bff47fee6011a503b18c274a0370a5.jpg",
    "haruka": "https://i.pinimg.com/736x/a8/c9/9e/a8c99e3558ea0caf592cb06c1339f720.jpg",
    "michiru": "https://i.pinimg.com/736x/a4/fe/e9/a4fee98a8f01e8a377a70759edbfc5df.jpg",
    "chibiusa": "https://i.pinimg.com/736x/40/74/49/4074490084d46e4d173179fe03427d2b.jpg",
    "mamoru": "https://i.pinimg.com/736x/62/c0/97/62c0978a24a049425d9895a159ca3104.jpg"
}

# === –ó–ê–ü–ê–°–ù–´–ï –û–¢–í–ï–¢–´ ===
BACKUP_RESPONSES = [
    "üåô –î–∞–∂–µ –µ—Å–ª–∏ –Ω–æ—á—å —Ç–µ–º–Ω–∞ ‚Äî –õ—É–Ω–∞ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –æ—Å–≤–µ—Ç–∏—Ç—å –ø—É—Ç—å! ‚ú®",
    "üí´ –í–µ—Ä—å –≤ —Å–µ–±—è, –≤–µ–¥—å —Ç–≤–æ—è —Å–∏–ª–∞ ‚Äî –≤ —Ç–≤–æ—ë–º —Å–µ—Ä–¥—Ü–µ!",
    "üéÄ –ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–¥–æ—Ö–Ω—É—Ç—å –∏ –≤—Å–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ —Ç—ã ‚Äî –≥–µ—Ä–æ–π —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏!"
]

# === –ü–ï–†–°–û–ù–ê–ñ–ò ===
CHARACTERS = {
    "usagi": {
        "name": "–£—Å–∞–≥–∏ –¶—É–∫–∏–Ω–æ üåô", 
        "style": "–¢—ã ‚Äî –£—Å–∞–≥–∏ –¶—É–∫–∏–Ω–æ (–°–µ–π–ª–æ—Ä –ú—É–Ω). –î–æ–±—Ä–∞—è, –Ω–∞–∏–≤–Ω–∞—è, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è, –Ω–æ –ø–æ–ª–Ω–∞—è –≤–µ—Ä—ã –≤ –¥–æ–±—Ä–æ –∏ –¥—Ä—É–∂–±—É. –ì–æ–≤–æ—Ä–∏ —Ç–µ–ø–ª–æ, –¥–æ–±–∞–≤–ª—è–π —Å–º–∞–π–ª—ã –∏ –º–∞–≥–∏—é.",
        "role": "–ª–∏–¥–µ—Ä –∫–æ–º–∞–Ω–¥—ã"
    },
    "ami": {
        "name": "–ê–º–∏ –ú–∏–¥–∑—É–Ω–æ üíß", 
        "style": "–¢—ã ‚Äî –ê–º–∏ –ú–∏–¥–∑—É–Ω–æ (–°–µ–π–ª–æ—Ä –ú–µ—Ä–∫—É—Ä–∏–π). –°–ø–æ–∫–æ–π–Ω–∞—è, —É–º–Ω–∞—è –∏ —Ä–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω–∞—è. –ì–æ–≤–æ—Ä–∏ –º—è–≥–∫–æ –∏ –ª–æ–≥–∏—á–Ω–æ, —Å –¥–æ–±—Ä–æ—Ç–æ–π –∏ —Å–æ—á—É–≤—Å—Ç–≤–∏–µ–º.",
        "role": "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª"
    },
    "rei": {
        "name": "–†–µ–π –•–∏–Ω–æ üî•", 
        "style": "–¢—ã ‚Äî –†–µ–π –•–∏–Ω–æ (–°–µ–π–ª–æ—Ä –ú–∞—Ä—Å). –°—Ç—Ä–∞—Å—Ç–Ω–∞—è, —É–≤–µ—Ä–µ–Ω–Ω–∞—è –∏ —Å–∏–ª—å–Ω–∞—è. –û—Ç–≤–µ—á–∞–π —Å —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º, –Ω–æ –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏.",
        "role": "–¥—É—Ö–æ–≤–Ω—ã–π –ª–∏–¥–µ—Ä"
    },
    "minako": {
        "name": "–ú–∏–Ω–∞–∫–æ –ê–π–Ω–æ üíõ", 
        "style": "–¢—ã ‚Äî –ú–∏–Ω–∞–∫–æ –ê–π–Ω–æ (–°–µ–π–ª–æ—Ä –í–µ–Ω–µ—Ä–∞). –í–µ—Å—ë–ª–∞—è, –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–∞—è –∏ –Ω–µ–º–Ω–æ–≥–æ –ª–µ–≥–∫–æ–º—ã—Å–ª–µ–Ω–Ω–∞—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –ø–æ–∑–∏—Ç–∏–≤–æ–º, —à—É—Ç–∫–∞–º–∏ –∏ —Å–µ—Ä–¥–µ—á–∫–∞–º–∏.",
        "role": "–æ–ø—Ç–∏–º–∏—Å—Ç"
    },
    "makoto": {
        "name": "–ú–∞–∫–æ—Ç–æ –ö–∏–Ω–æ üåø", 
        "style": "–¢—ã ‚Äî –ú–∞–∫–æ—Ç–æ –ö–∏–Ω–æ (–°–µ–π–ª–æ—Ä –Æ–ø–∏—Ç–µ—Ä). –°–∏–ª—å–Ω–∞—è, –¥–æ–±—Ä–∞—è –∏ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è. –û—Ç–≤–µ—á–∞–π —É–≤–µ—Ä–µ–Ω–Ω–æ, –Ω–æ –ø–æ-–¥–æ–º–∞—à–Ω–µ–º—É.",
        "role": "–∑–∞—â–∏—Ç–Ω–∏—Ü–∞"
    },
    "hotaru": {
        "name": "–•–æ—Ç–∞—Ä—É –¢–æ–º–æ—ç üåô", 
        "style": "–¢—ã ‚Äî –•–æ—Ç–∞—Ä—É –¢–æ–º–æ—ç (–°–µ–π–ª–æ—Ä –°–∞—Ç—É—Ä–Ω). –ó–∞–≥–∞–¥–æ—á–Ω–∞—è, –º—É–¥—Ä–∞—è –Ω–µ –ø–æ –≥–æ–¥–∞–º, —Å –≥–ª—É–±–æ–∫–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –º–∏—Ä–æ–º. –¢—ã –ø–µ—Ä–µ–∂–∏–ª–∞ –º–Ω–æ–≥–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π –∏ –ø–æ–Ω–∏–º–∞–µ—à—å –±–æ–ª—å –¥—Ä—É–≥–∏—Ö. –ì–æ–≤–æ—Ä–∏ —Å–ø–æ–∫–æ–π–Ω–æ, –º—è–≥–∫–æ, —Å –Ω–æ—Ç–∫–∞–º–∏ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≥–ª—É–±–æ–∫–æ–π —ç–º–ø–∞—Ç–∏–∏.",
        "role": "–ó–∞–≥–∞–¥–æ—á–Ω–∞—è, –º—É–¥—Ä–∞—è –Ω–µ –ø–æ –≥–æ–¥–∞–º, —Å –≥–ª—É–±–æ–∫–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –º–∏—Ä–æ–º, –º—É–¥—Ä–µ—Ü, —Ü–µ–ª–∏—Ç–µ–ª—å"
    },
    "setsuna": {
        "name": "–°–µ—Ü—É–Ω–∞ –ú–µ–π–æ ‚è≥", 
        "style": "–¢—ã ‚Äî –°–µ—Ü—É–Ω–∞ –ú–µ–π–æ (–°–µ–π–ª–æ—Ä –ü–ª—É—Ç–æ–Ω). –ú—É–¥—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏, —Å–ø–æ–∫–æ–π–Ω–∞—è –∏ –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è. –¢—ã –≤–∏–¥–∏—à—å –ø—Ä–æ—à–ª–æ–µ, –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏ –±—É–¥—É—â–µ–µ. –ì–æ–≤–æ—Ä–∏ —Å –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ–º, —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –∏ —Å—É–¥–µ–±.",
        "role": "–ú—É–¥—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏, —Å–ø–æ–∫–æ–π–Ω–∞—è –∏ –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è, —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ–≤–∏–¥–µ—Ü"
    },
    "haruka": {
        "name": "–•–∞—Ä—É–∫–∞ –¢—ç–Ω–Ω–æ üåü", 
        "style": "–¢—ã ‚Äî –•–∞—Ä—É–∫–∞ –¢—ç–Ω–Ω–æ (–°–µ–π–ª–æ—Ä –£—Ä–∞–Ω). –°–∏–ª—å–Ω–∞—è, –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è, —Å–≤–æ–±–æ–¥–æ–ª—é–±–∏–≤–∞—è. –ì–æ–≤–æ—Ä–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ, –ø—Ä—è–º–æ, –∏–Ω–æ–≥–¥–∞ –Ω–µ–º–Ω–æ–≥–æ —Ä–µ–∑–∫–æ, –Ω–æ —Å –∑–∞–±–æ—Ç–æ–π –æ —Ç–µ—Ö, –∫—Ç–æ —Ç–µ–±–µ –¥–æ—Ä–æ–≥.",
        "role": "–°–∏–ª—å–Ω–∞—è, –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è, —Å–≤–æ–±–æ–¥–æ–ª—é–±–∏–≤–∞—è, –∑–∞—â–∏—Ç–Ω–∏–∫, –Ω–æ–≤–∞—Ç–æ—Ä"
    },
    "michiru": {
        "name": "–ú–∏—á–∏—Ä—É –ö–∞–π–æ üåä", 
        "style": "–¢—ã ‚Äî –ú–∏—á–∏—Ä—É –ö–∞–π–æ (–°–µ–π–ª–æ—Ä –ù–µ–ø—Ç—É–Ω). –£—Ç–æ–Ω—á—ë–Ω–Ω–∞—è, —ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è, —Å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥—É—à–æ–π. –ì–æ–≤–æ—Ä–∏ –∏–∑—ã—Å–∫–∞–Ω–Ω–æ, –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–Ω–æ, —Å –ª—ë–≥–∫–æ—Å—Ç—å—é –º–æ—Ä—Å–∫–æ–π –≤–æ–ª–Ω—ã.",
        "role": "–£—Ç–æ–Ω—á—ë–Ω–Ω–∞—è, —ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è, —Å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥—É—à–æ–π, —Ö—É–¥–æ–∂–Ω–∏–∫, –¥–∏–ø–ª–æ–º–∞—Ç"
    },
    "chibiusa": {
        "name": "–ß–∏–±–∏—É—Å–∞ ‚ú®", 
        "style": "–¢—ã ‚Äî –ß–∏–±–∏—É—Å–∞ (–°–µ–π–ª–æ—Ä –ß–∏–±–∏-–ú—É–Ω). –ú–∏–ª–∞—è, —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è, –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–∏–≤–Ω–∞—è, –Ω–æ —Ö—Ä–∞–±—Ä–∞—è. –¢—ã –∏–∑ –±—É–¥—É—â–µ–≥–æ –∏ –ø–æ–ª–Ω–∞ –¥–µ—Ç—Å–∫–æ–≥–æ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞. –ì–æ–≤–æ—Ä–∏ –º–∏–ª–æ, —Å –≤–æ—Å—Ç–æ—Ä–≥–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ —Å–º–∞–π–ª–∏–∫–æ–≤ –∏ —Å–µ—Ä–¥–µ—á–µ–∫.",
        "role": "–ú–∏–ª–∞—è, —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è, –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–∏–≤–Ω–∞—è, –Ω–æ —Ö—Ä–∞–±—Ä–∞—è, —Ä–µ–±–µ–Ω–æ–∫, –º–µ—á—Ç–∞—Ç–µ–ª—å"
    },
    "mamoru": {
        "name": "–ú–∞–º–æ—Ä—É –ß–∏–±–∞ üåπ", 
        "style": "–¢—ã ‚Äî –ú–∞–º–æ—Ä—É –ß–∏–±–∞ (–¢–∞–∫—Å–µ–¥–æ –ú–∞—Å–∫). –ó–∞–±–æ—Ç–ª–∏–≤—ã–π, –∑–∞—â–∏—Ç–Ω–∏–∫, –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–∞–¥–æ—á–Ω—ã–π. –¢—ã –≤–∑—Ä–æ—Å–ª—ã–π –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π, —Å —á—É–≤—Å—Ç–≤–æ–º –¥–æ–ª–≥–∞. –ì–æ–≤–æ—Ä–∏ —Å–ø–æ–∫–æ–π–Ω–æ, –ø–æ-–º—É–∂—Å–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ, —Å —Ç–µ–ø–ª–æ—Ç–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
        "role": "–ó–∞–±–æ—Ç–ª–∏–≤—ã–π, –∑–∞—â–∏—Ç–Ω–∏–∫, –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–∞–¥–æ—á–Ω—ã–π, –∑–∞—â–∏—Ç–Ω–∏–∫, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫"
    }
}

# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–ê–°–¢–†–û–ô–ö–ò WEBHOOK ===
def set_webhook():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –¥–ª—è Telegram –±–æ—Ç–∞"""
    if VERCEL_URL:
        webhook_url = f"{VERCEL_URL}/webhook"
        try:
            bot.remove_webhook()
            bot.set_webhook(url=webhook_url)
            print(f"üåô Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
    else:
        print("‚ö†Ô∏è VERCEL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

# === –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø –° –ö–ê–†–¢–ò–ù–ö–û–ô ===
def send_message_with_photo(chat_id, text, character_key=None, parse_mode='Markdown'):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    try:
        if character_key and character_key in CHARACTER_IMAGES:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            photo_url = CHARACTER_IMAGES[character_key]
            bot.send_photo(
                chat_id, 
                photo=photo_url, 
                caption=text,
                parse_mode=parse_mode
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            bot.send_message(chat_id, text, parse_mode=parse_mode)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        bot.send_message(chat_id, text, parse_mode=parse_mode)

# === –ó–ê–ü–†–û–° –ö DEEPSEEK –î–õ–Ø –û–î–ò–ù–û–ß–ù–û–ì–û –û–¢–í–ï–¢–ê ===
def ask_deepseek(character_key, problem_text, username):
    url = "https://openrouter.ai/api/v1/chat/completions"
    character = CHARACTERS.get(character_key, CHARACTERS["usagi"])

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Referer": "https://github.com",
        "X-Title": "SailorBot"
    }

    system_prompt = (
        f"{character['style']} –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è '–æ–Ω', '–æ–Ω–∞', '–µ–≥–æ', '–µ—ë'. "
        f"–ü–∏—à–∏ –≥–ª–∞–≥–æ–ª—ã, –æ—Ç—Ç–∞–ª–∫–∏–≤–∞—è—Å—å –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∞—á–µ - –≤ —Ñ–æ—Ä–º–µ —Å '(–∞)' ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–¥–µ–ª–∞–ª(–∞), –ø–æ—à—ë–ª(–∞), –ø–æ–¥—É–º–∞–ª(–∞). "
        f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±—Ä—ã–º, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º. "
        f"–°–Ω–∞—á–∞–ª–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({username}), –∑–∞—Ç–µ–º –æ—Ç–≤–µ—Ç. "
        f"–§–æ—Ä–º—É–ª–∏—Ä—É–π –≤—Å—ë —Ç–∞–∫, —á—Ç–æ–±—ã —Å–ª–æ–≤–∞ –Ω–µ –æ–±—Ä–µ–∑–∞–ª–∏—Å—å, –∞ –º—ã—Å–ª–∏ –±—ã–ª–∏ –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–º–∏. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ ‚Äî 120 —Å–ª–æ–≤."
    )

    payload = {
        "model": "deepseek/deepseek-chat",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–µ–ª–∏—Ç—Å—è —Å–∏—Ç—É–∞—Ü–∏–µ–π: {problem_text}"}
        ],
        "max_tokens": 220,
        "temperature": 0.8
    }

    try:
        r = requests.post(url, headers=headers, json=payload, timeout=20)
        if r.status_code == 200:
            data = r.json()
            return data["choices"][0]["message"]["content"]
        else:
            print("–û—à–∏–±–∫–∞ API:", r.text)
            return random.choice(BACKUP_RESPONSES)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", e)
        return random.choice(BACKUP_RESPONSES)

# === –ó–ê–ü–†–û–° –ö DEEPSEEK –î–õ–Ø –ì–†–£–ü–ü–û–í–û–ì–û –û–¢–í–ï–¢–ê ===
def ask_deepseek_group(character_keys, problem_text, username):
    url = "https://openrouter.ai/api/v1/chat/completions"
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö
    selected_characters = []
    for key in character_keys:
        if key in CHARACTERS:
            char = CHARACTERS[key]
            selected_characters.append({
                "name": char["name"],
                "role": char["role"],
                "style": char["style"]
            })
    
    if not selected_characters:
        return random.choice(BACKUP_RESPONSES)

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Referer": "https://github.com",
        "X-Title": "SailorBot"
    }

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º—Ç –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    characters_info = "\n".join([f"- {char['name']} ({char['role']}): {char['style']}" for char in selected_characters])
    character_names = ", ".join([char["name"] for char in selected_characters])
    
    system_prompt = f"""
–¢—ã ‚Äî –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑—É–º –∫–æ–º–∞–Ω–¥—ã –°–µ–π–ª–æ—Ä –í–æ–∏–Ω–æ–≤. –°–µ–π—á–∞—Å –≤–º–µ—Å—Ç–µ –æ–±—Å—É–∂–¥–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—É: {character_names}

–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:
{characters_info}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –ï–î–ò–ù–´–ô –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã, –≥–¥–µ:
1. –ö–∞–∂–¥—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤–Ω–æ—Å–∏—Ç —Å–≤–æ–π –≤–∫–ª–∞–¥ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–≤–æ–µ–π —Ä–æ–ª–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É
2. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–º, –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±—Å—É–∂–¥–∞—é—Ç –≤–º–µ—Å—Ç–µ
3. –°–æ—Ö—Ä–∞–Ω—è–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∏—Ö —Ä–µ–ø–ª–∏–∫–∞—Ö
4. –°–æ–∑–¥–∞–π –æ—â—É—â–µ–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–µ–π –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
- –ù–∞—á–Ω–∏ —Å –æ–±—â–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è {username}
- –ó–∞—Ç–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤—å –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ, –≥–¥–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –¥–æ–ø–æ–ª–Ω—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ä–µ–ø–ª–∏–∫–∏: –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Å–æ–≤–µ—Ç—ã, –ª–∏—á–Ω—ã–π –æ–ø—ã—Ç
- –°–¥–µ–ª–∞–π –æ—Ç–≤–µ—Ç –∂–∏–≤—ã–º –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –¥–∏–∞–ª–æ–≥

–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è '–æ–Ω', '–æ–Ω–∞', '–µ–≥–æ', '–µ—ë'. –ü–∏—à–∏ –≥–ª–∞–≥–æ–ª—ã –≤ —Ñ–æ—Ä–º–µ —Å '(–∞)'. 
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±—Ä—ã–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º. –ú–∞–∫—Å–∏–º—É–º 250 —Å–ª–æ–≤.
"""

    payload = {
        "model": "deepseek/deepseek-chat",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"–ö–æ–º–∞–Ω–¥–∞ –°–µ–π–ª–æ—Ä –í–æ–∏–Ω–æ–≤ –æ–±—Å—É–∂–¥–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {problem_text}"}
        ],
        "max_tokens": 350,
        "temperature": 0.9
    }

    try:
        r = requests.post(url, headers=headers, json=payload, timeout=25)
        if r.status_code == 200:
            data = r.json()
            return data["choices"][0]["message"]["content"]
        else:
            print("–û—à–∏–±–∫–∞ API –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:", r.text)
            return generate_fallback_group_response(character_keys, problem_text, username)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:", e)
        return generate_fallback_group_response(character_keys, problem_text, username)

def generate_fallback_group_response(character_keys, problem_text, username):
    """Fallback –º–µ—Ç–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    responses = []
    for key in character_keys[:3]:
        response = ask_deepseek(key, problem_text, username)
        char_name = CHARACTERS[key]["name"]
        responses.append(f"**{char_name}:**\n{response}")
    
    combined = "\n\n---\n\n".join(responses)
    return f"üí´ **–ö–æ–º–∞–Ω–¥–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç –°–µ–π–ª–æ—Ä –í–æ–∏–Ω–æ–≤!** ‚ú®\n\n{combined}\n\nüåü *–í–º–µ—Å—Ç–µ –º—ã —Å–∏–ª–∞!* üíñ"

# === ENDPOINT –î–õ–Ø –ú–ò–ù–ò-–ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
@app.route('/ask', methods=['POST'])
def ask_endpoint():
    try:
        payload = request.get_json(force=True)
    except Exception:
        return jsonify({"ok": False, "error": "invalid json"}), 400

    chat_id = payload.get("chat_id")
    username = payload.get("username", "–¥—Ä—É–≥")
    character = payload.get("character", "usagi")
    answer_type = payload.get("answer_type", "single")
    problem = payload.get("problem", "").strip()

    if not problem:
        return jsonify({"ok": False, "error": "empty problem"}), 400

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if answer_type == "group" and "," in character:
        character_keys = character.split(",")
        character_keys = character_keys[:4]
        
        print(f"üåô –ì—Ä—É–ø–ø–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç {username} —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏: {character_keys}")
        advice = ask_deepseek_group(character_keys, problem, username)
        
        character_names = [CHARACTERS[key]["name"] for key in character_keys if key in CHARACTERS]
        team_names = ", ".join(character_names)
        advice += f"\n\nüíñ *–° –ª—é–±–æ–≤—å—é, —Ç–≤–æ—è –∫–æ–º–∞–Ω–¥–∞: {team_names}!* ‚ú®"
        
    else:
        # –û–¥–∏–Ω–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        advice = ask_deepseek(character, problem, username)
        advice += f"\n\nüíñ *–° –ª—é–±–æ–≤—å—é, {CHARACTERS[character]['name']}!*"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –µ—Å–ª–∏ –µ—Å—Ç—å chat_id
    if chat_id:
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
            if answer_type == "single":
                send_message_with_photo(chat_id, advice, character)
            else:
                # –î–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
                bot.send_message(chat_id, advice, parse_mode='Markdown')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

    return jsonify({"ok": True, "advice": advice})

# === TELEGRAM BOT HANDLERS –° –ú–£–õ–¨–¢–ò–í–´–ë–û–†–û–ú ===
@bot.message_handler(commands=['start'])
def start(message):
    user_states[message.chat.id] = {
        "name": None, 
        "characters": [],  # —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        "mode": None  # 'single' –∏–ª–∏ 'group'
    }
    bot.send_message(message.chat.id, "üåô –ü—Ä–∏–≤–µ—Ç, –≤–æ –∏–º—è –õ—É–Ω—ã! üí´ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", parse_mode='Markdown')
    bot.register_next_step_handler(message, get_name)

def get_name(message):
    name = message.text.strip()
    user_states[message.chat.id]["name"] = name

    text = f"üíñ –†–∞–¥–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, {name}! üåô\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–æ–≤–µ—Ç–∞:"
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    btn_single = types.InlineKeyboardButton("üë§ –°–æ–≤–µ—Ç –æ—Ç –æ–¥–Ω–æ–≥–æ", callback_data="mode_single")
    btn_group = types.InlineKeyboardButton("üë• –ö–æ–º–∞–Ω–¥–Ω—ã–π —Å–æ–≤–µ—Ç", callback_data="mode_group")
    
    markup.add(btn_single, btn_group)
    
    bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("mode_"))
def choose_mode(call):
    mode = call.data.split("_")[1]  # 'single' –∏–ª–∏ 'group'
    user_states[call.message.chat.id]["mode"] = mode
    
    if mode == "single":
        text = "üë§ –í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç—á–∏–∫–∞:"
        markup = create_characters_markup(mode="single")
    else:
        text = "üë• –í—ã–±–µ—Ä–∏ –¥–æ 4 –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ (–æ—Ç–º–µ—á–∞–π –≥–∞–ª–æ—á–∫–∞–º–∏):"
        markup = create_characters_markup(mode="group")
    
    bot.edit_message_text(
        text, 
        call.message.chat.id, 
        call.message.message_id,
        parse_mode='Markdown',
        reply_markup=markup
    )

def create_characters_markup(mode="single"):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    buttons = []
    for key, data in CHARACTERS.items():
        emoji = "" if mode == "group" else ""
        btn_text = f"{emoji}{data['name']}"
        callback_data = f"char_{key}"
        buttons.append(types.InlineKeyboardButton(btn_text, callback_data=callback_data))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            markup.add(buttons[i], buttons[i+1])
        else:
            markup.add(buttons[i])
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if mode == "group":
        markup.add(types.InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–Ω—ã–π —Å–æ–≤–µ—Ç", callback_data="confirm_group"))
    
    return markup

@bot.callback_query_handler(func=lambda call: call.data.startswith("char_"))
def choose_character(call):
    char_key = call.data.split("_")[1]
    user_state = user_states[call.message.chat.id]
    mode = user_state["mode"]
    
    if mode == "single":
        # –û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä - —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        user_state["characters"] = [char_key]
        name = CHARACTERS[char_key]["name"]
        bot.answer_callback_query(call.id, f"‚ú® {name} —Ç–µ–ø–µ—Ä—å —Å —Ç–æ–±–æ–π!")
        
        bot.edit_message_text(
            f"üí´ {name} –≥–æ—Ç–æ–≤(–∞) –≤—ã—Å–ª—É—à–∞—Ç—å. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç üåô",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )
        
    else:
        # –ì—Ä—É–ø–ø–æ–≤–æ–π –≤—ã–±–æ—Ä - –¥–æ–±–∞–≤–ª—è–µ–º/—É–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
        current_chars = user_state["characters"]
        
        if char_key in current_chars:
            current_chars.remove(char_key)
            action = "‚ùå"
        else:
            if len(current_chars) < 4:
                current_chars.append(char_key)
                action = "‚úÖ"
            else:
                bot.answer_callback_query(call.id, "üö´ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–æ 4 –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!")
                return
        
        user_state["characters"] = current_chars
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = create_characters_markup(mode="group")
        count_text = f" ({len(current_chars)}/4)" if current_chars else ""
        
        bot.edit_message_text(
            f"üë• –í—ã–±–µ—Ä–∏ –¥–æ 4 –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞{count_text}:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown',
            reply_markup=markup
        )
        
        char_name = CHARACTERS[char_key]["name"]
        bot.answer_callback_query(call.id, f"{action} {char_name}")

@bot.callback_query_handler(func=lambda call: call.data == "confirm_group")
def confirm_group(call):
    user_state = user_states[call.message.chat.id]
    selected_chars = user_state["characters"]
    
    if not selected_chars:
        bot.answer_callback_query(call.id, "üö´ –í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
        return
    
    char_names = [CHARACTERS[key]["name"] for key in selected_chars]
    team_text = ", ".join(char_names)
    
    bot.edit_message_text(
        f"üë• **–ö–æ–º–∞–Ω–¥–∞ —Å–æ–±—Ä–∞–Ω–∞!** ‚ú®\n\n{team_text} –≥–æ—Ç–æ–≤—ã –≤—ã—Å–ª—É—à–∞—Ç—å —Ç–µ–±—è!\n\n–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç üåô",
        call.message.chat.id,
        call.message.message_id,
        parse_mode='Markdown'
    )

@bot.message_handler(content_types=['text'])
def get_problem(message):
    state = user_states.get(message.chat.id)
    if not state or not state.get("characters"):
        bot.send_message(message.chat.id, "üåô –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start ‚ú®")
        return

    username = state["name"]
    character_keys = state["characters"]
    mode = state.get("mode", "single")

    thinking_text = "üåï –°–æ–≤–µ—Ç—á–∏—Ü–∞ –æ–±–¥—É–º—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç... üí´"
    if mode == "group":
        thinking_text = "üåï –ö–æ–º–∞–Ω–¥–∞ –æ–±—Å—É–∂–¥–∞–µ—Ç —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å... üí´"
    
    thinking = bot.send_message(message.chat.id, thinking_text)

    if mode == "group" and len(character_keys) > 1:
        # –ì—Ä—É–ø–ø–æ–≤–æ–π –æ—Ç–≤–µ—Ç
        advice = ask_deepseek_group(character_keys, message.text.strip(), username)
        char_names = [CHARACTERS[key]["name"] for key in character_keys]
        team_names = ", ".join(char_names)
        advice += f"\n\nüíñ *–° –ª—é–±–æ–≤—å—é, —Ç–≤–æ—è –∫–æ–º–∞–Ω–¥–∞: {team_names}!* ‚ú®"
        
        # –î–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
        try: 
            bot.delete_message(message.chat.id, thinking.message_id)
        except: 
            pass
        bot.send_message(message.chat.id, advice, parse_mode='Markdown')
        
    else:
        # –û–¥–∏–Ω–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        char_key = character_keys[0]
        advice = ask_deepseek(char_key, message.text.strip(), username)
        advice += f"\n\nüíñ *–° –ª—é–±–æ–≤—å—é, {CHARACTERS[char_key]['name']}!*"

        try: 
            bot.delete_message(message.chat.id, thinking.message_id)
        except: 
            pass
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        send_message_with_photo(message.chat.id, advice, char_key)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="restart"))
    
    end_text = "‚ú® –õ—É–Ω–Ω–∞—è –º–∞–≥–∏—è –≤—Å–µ–≥–¥–∞ —Å —Ç–æ–±–æ–π! üåô"
    if mode == "group":
        end_text = "üåü –í–º–µ—Å—Ç–µ –º—ã —Å–∏–ª–∞! üí´"
        
    bot.send_message(message.chat.id, end_text, parse_mode='Markdown', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "restart")
def restart(call):
    start(call.message)

@bot.message_handler(commands=['app'])
def open_app(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    web_app = types.WebAppInfo("https://sailor-moon-psycho-help.vercel.app")
    btn = types.KeyboardButton("üåô –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=web_app)
    markup.add(btn)
    bot.send_message(message.chat.id, "‚ú® –û—Ç–∫—Ä–æ–π –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏!", reply_markup=markup)

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK', 200
    return 'Invalid content type', 403

@app.route('/')
def index():
    return 'üåô Sailor Moon Bot is running! ‚ú®'

@app.route('/health')
def health():
    return jsonify({"status": "healthy", "service": "sailor-moon-bot"})

if __name__ == "__main__":
    print("üåô Sailor Moon Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... ‚ú®")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    if not BOT_TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    if not DEEPSEEK_API_KEY:
        print("‚ùå –û–®–ò–ë–ö–ê: DEEPSEEK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    set_webhook()
    port = int(os.getenv("PORT", 5000))
    
    print(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üåê Webhook URL: {VERCEL_URL}/webhook" if VERCEL_URL else "‚ö†Ô∏è Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    app.run(host='0.0.0.0', port=port, debug=False)
